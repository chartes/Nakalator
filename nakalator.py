#!/usr/bin/env python3
# -- coding: utf-8 --

"""Nakalator
Script to upload data to Nakala.

Last update: 2024
"""
import os
from typing import Union
import sys
from dataclasses import dataclass, asdict
import datetime
from time import sleep, time
from concurrent.futures import ThreadPoolExecutor
import backoff
from requests.exceptions import RequestException

from termcolor import colored
import typer
from InquirerPy import inquirer
from tqdm import tqdm
from pyfiglet import Figlet

import pandas as pd
import json

import requests

from lib.constants import (NAKALA_ROUTES,
                           METADATA_AUTO,
                           data_dir,
                           metadatas_dir,
                           output_dir,
                           credentials)
from lib.utils import load_yaml
from lib.tests import (
    __check_total_images,
    __check_order_images
)


@dataclass
class NakalaItem:
    original_name: Union[str, None] = None
    collection_doi: Union[str, None] = None
    data_doi: Union[str, None] = None
    sha1: Union[str, None] = None

    @classmethod
    def to_csv(cls, name, items):
        pd.DataFrame([asdict(item) for item in items]).to_csv(
            os.path.join(output_dir, f"{name}_report_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"),
            encoding="utf-8",
            index=True,
            sep=";")
        return


app = typer.Typer()

API_NAKALA_KEY = load_yaml(credentials)["API_NAKALA_KEY"]


# requests functions
@backoff.on_exception(backoff.expo, RequestException, max_time=60)
def post(endpoint, data, files=None):
    if files is not None:
        response = requests.post(endpoint, files=files, headers={
            "X-API-KEY": API_NAKALA_KEY,
            "accept": "application/json",
        })
    else:
        response = requests.post(endpoint, data=data, headers={
            "X-API-KEY": API_NAKALA_KEY,
            "accept": "application/json",
            "Content-Type": "application/json",
        })

    if response.status_code not in [200, 201]:
        if response.status_code == 401:
            typer.echo(colored("üî¥\tUnauthorized. Please check your credentials", "red"))
            sys.exit()
        else:
            typer.echo(colored("üîÅ \tretrying with backoff...", "blue"))
    return json.loads(response.text)


def intialize(url, files, metadata_config):
    try:
        metadata = {"status": metadata_config["data"]["status"],
                    "files": files,
                    "metas": [
                        {**v,
                         "propertyUri": k,
                         }
                        for k, v in metadata_config["metadata"].items()
                    ]}

        if metadata_config["collectionsIds"] != "":
            collectionsID = {"collectionsIds": [metadata_config["collectionsIds"]]}
            metadata.update(collectionsID)

        # add autogenerated metadata
        metadata["metas"] += METADATA_AUTO

        handle_data = post(endpoint=f"{url}/datas", data=json.dumps(metadata))
        return handle_data
    except Exception as e:
        typer.echo(colored(f"Error: {e} - Cannot create data", "red"))
        sys.exit()


def create_file_cur(image):
    file_open = open(image, "rb")
    return {"file": file_open}


def add_file(url, files):
    image = create_file_cur(files)
    handle_sha1 = post(endpoint=f"{url}/datas/uploads", data=None, files=image)
    try:
        handle_sha1['sha1']
    except:
        return {}
    return handle_sha1


def process(components, images, api_url, method, progress):
    sha1s = []
    results_objects = []
    empty_sha1 = []
    for i, item in enumerate(components):
        handle_sha1 = item.result() if method == "hard" else add_file(api_url, item)
        if len(handle_sha1) != 0:
            sha1s.append(handle_sha1)
            results_objects.append(NakalaItem(sha1=handle_sha1['sha1'], original_name=str(os.path.basename(images[i]))))
        else:
            results_objects.append(NakalaItem(sha1=None, original_name=str(os.path.basename(images[i]))))
            empty_sha1.append(images[i])
        progress.set_description(f"Processing {os.path.basename(images[i])}...")
        progress.update(1)

    return sha1s, results_objects, empty_sha1


def work(images, method, api_url):
    images_prepared = [image for image in images]

    def process_images(images_to_process, accumulated_results=None, accumulated_sha1s=None,
                       accumulated_empty_sha1s=None):
        if accumulated_results is None:
            accumulated_results = []
        if accumulated_sha1s is None:
            accumulated_sha1s = []
        if accumulated_empty_sha1s is None:
            accumulated_empty_sha1s = []

        with tqdm(total=len(images_to_process)) as progress:
            if method.lower() == "hard":
                with ThreadPoolExecutor(max_workers=os.cpu_count() - 1) as executor:
                    sha1s, results_objects, empty_sha1s = process(
                        components=[executor.submit(add_file, api_url, img_cur) for img_cur in images_to_process],
                        images=images,
                        api_url=api_url,
                        method=method,
                        progress=progress)
            else:
                sha1s, results_objects, empty_sha1s = process(components=images_to_process,
                                                              images=images,
                                                              api_url=api_url,
                                                              method=method,
                                                              progress=progress)
        accumulated_results.extend(results_objects)
        accumulated_sha1s.extend(sha1s)
        accumulated_empty_sha1s.extend(empty_sha1s)

        if empty_sha1s:
            typer.echo(colored(
                f"‚åõ\tRetry for {len(empty_sha1s)} failed uploads. Please wait 5 seconds before started new loop...",
                "yellow"))
            sleep(5)
            retry_images = [image for image in empty_sha1s]
            process_images(retry_images, accumulated_results, accumulated_sha1s, [])

        return accumulated_sha1s, accumulated_results, accumulated_empty_sha1s

    return process_images(images_prepared)


@app.command()
def main(method: str = typer.Option("soft", "--method", "-m", help="Method to send data to Nakala: 'hard' | 'soft'")):
    f = Figlet(font='digital')
    banner = f.renderText('Nakalator')
    print(f"{banner}")
    print("""This CLI allows you to send images to Nakala.\n¬© 2024 - ENC / Mission projets num√©riques\n""")
    # select an environment: test or production
    environment = inquirer.select(
        message="Which Nakala environment do you want to use to send your data?",
        choices=['test', 'production'],
        default="test",
    ).execute()
    # select a metadata file
    metadatas_yaml = inquirer.select(
        message="Which metadata file do you want to use?",
        choices=[m for m in os.listdir(metadatas_dir) if m.endswith(".yml")],
    ).execute()

    # load metadata
    metadata_config = load_yaml(os.path.join(metadatas_dir, metadatas_yaml))

    base_url, api_url = NAKALA_ROUTES[environment].values()

    dir_images = metadata_config["data"]["path"]

    # retrieve all images from the directory with absolute path
    images = sorted([os.path.join(dir_images, f) for f in os.listdir(os.path.join(data_dir, dir_images))])

    confirm = inquirer.confirm(
        message=f"Are you sure you want to create a data repository with {len(images)} images to Nakala {environment}?",
        default=False,
    ).execute()

    if confirm:
        typer.echo(f"Start sending data from {os.path.basename(dir_images)}/ to Nakala {environment}...")
        typer.echo(f"Add files...")
        start = time()
        sha1s, results_objects, empty_sha1s = work(images, method, api_url)

        sleep(0.5)
        handle_data_id = intialize(api_url, sha1s, metadata_config)
        try:
            handle_data_id['payload']['id']
        except Exception as e:
            print(f"Error: {e} - Cannot create data")
            sys.exit()
        for obj in results_objects:
            obj.data_doi = handle_data_id['payload']['id']
            obj.collection_doi = metadata_config["collectionsIds"]

        # save report
        # sorted results_objects by original_name
        NakalaItem.to_csv(metadata_config['name'], sorted(results_objects, key=lambda x: x.original_name))
        end = time()
        typer.echo(colored(f"‚è±Ô∏è\tTotal time: {end - start} seconds", "blue"))
        run_tests = True
        files = None
        try:
            response = requests.get(f"{api_url}/datas/{handle_data_id['payload']['id']}", headers={
                "X-API-KEY": API_NAKALA_KEY,
                "accept": "application/json",
            })
            files = response.json()['files']
        except:
            typer.echo(colored("üî¥\tCannot run tests. please check report manually.", "red"))
            run_tests = False

        if run_tests:
            typer.echo(colored("üîç \tRunning tests...", "blue"))
            __check_total_images(files, len(sorted(images)))
            __check_order_images(files, sorted([os.path.basename(image) for image in images]))

        typer.echo(colored(
            f"üëç\tData are created with success! Data handle: {handle_data_id['payload']['id']}, show report {metadata_config['name']}_report_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv in output folder\nDon't forget to reorder images in Nakala frontend.",
            "green"))
    else:
        sys.exit()


if __name__ == '__main__':
    cli = typer.main.get_command(app)
    cli.params = [
        param
        for param in cli.params
        if param.name != "show_completion" and param.name != "install_completion"
    ]
    cli()
